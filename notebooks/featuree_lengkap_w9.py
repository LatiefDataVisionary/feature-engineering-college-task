# -*- coding: utf-8 -*-
"""FeatureE lengkap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jcw96VvDWiXveOxOIFQJ-BzeCUiJ7kXx
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler, PowerTransformer
from sklearn.decomposition import PCA

# Data simulasi
data = {
    "Luas Rumah (m2)": [120, 250, 85, 190],
    "Jumlah Kamar Tidur": [3, 5, 2, 4],
    "Lokasi": ["Kota A", "Kota B", "Kota A", "Kota C"],
    "Tahun Dibangun": [2000, 2010, 1995, 2020],
    "Harga Rumah (Ribu $)": [300, 450, 200, 500],  # Target
}

# DataFrame awal
df = pd.DataFrame(data)

# --- Step 1: Feature Extraction ---
# Mengambil fitur relevan dari data awal
features = df[["Luas Rumah (m2)", "Jumlah Kamar Tidur", "Lokasi", "Tahun Dibangun"]]
target = df["Harga Rumah (Ribu $)"]

# --- Step 2: Feature Construction ---
# Menambahkan fitur baru: Umur Rumah
# Informasi tambahan: Fitur ini dihitung dari tahun sekarang
df["Umur Rumah"] = 2024 - df["Tahun Dibangun"]

# --- Step 3: Transformasi Fitur Kategorikal ---
# Menggunakan One-Hot Encoding untuk fitur kategorikal "Lokasi"
encoder = OneHotEncoder(sparse_output=False)  # Menghasilkan array dense
encoded_locations = encoder.fit_transform(df[["Lokasi"]])

# Membuat DataFrame untuk hasil encoding
encoded_location_df = pd.DataFrame(encoded_locations, columns=encoder.get_feature_names_out(["Lokasi"]))

# Menggabungkan hasil encoding ke DataFrame asli
df = pd.concat([df, encoded_location_df], axis=1)

# Menghapus fitur "Lokasi" dan "Tahun Dibangun" karena sudah diwakili oleh fitur baru
df.drop(["Lokasi", "Tahun Dibangun"], axis=1, inplace=True)

# --- Step 4: Scaling and Normalization ---
# Menggunakan StandardScaler untuk mengubah fitur ke skala standar (mean=0, std=1)
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[["Luas Rumah (m2)", "Jumlah Kamar Tidur", "Umur Rumah"]])

# Menambahkan fitur yang sudah diskalakan kembali ke DataFrame
scaled_df = pd.DataFrame(scaled_features, columns=["Luas Rumah (scaled)", "Jumlah Kamar (scaled)", "Umur Rumah (scaled)"])
df = pd.concat([df, scaled_df], axis=1)

print(df)

# --- Step 5: Log Transformation ---
# Mengurangi skewness pada target (Harga Rumah)
df["Log Harga Rumah"] = np.log1p(df["Harga Rumah (Ribu $)"])

# --- Step 6: Dimensionality Reduction (PCA) ---
# Menerapkan PCA pada fitur numerikal untuk mereduksi dimensi
pca = PCA(n_components=2)
numerical_features = df[["Luas Rumah (scaled)", "Jumlah Kamar (scaled)", "Umur Rumah (scaled)"]]
pca_features = pca.fit_transform(numerical_features)

# Menambahkan fitur hasil PCA ke DataFrame
pca_df = pd.DataFrame(pca_features, columns=["PCA1", "PCA2"])
df = pd.concat([df, pca_df], axis=1)

# --- Step 7: Hasil Akhir ---
# Menghapus fitur yang tidak relevan setelah transformasi
df.drop(["Luas Rumah (m2)", "Jumlah Kamar Tidur", "Umur Rumah", "Luas Rumah (scaled)",
         "Jumlah Kamar (scaled)", "Umur Rumah (scaled)"], axis=1, inplace=True)

# Menampilkan hasil akhir dataset
print("Dataset setelah semua tahap Feature Engineering:")
print(df)
